@inherits System.Web.Mvc.WebViewPage
@using System.Globalization
@using EPiServer.Framework.Web.Resources
@using EPiServer.Shell.Navigation
@using EPiServer.ServiceLocation
@using WebProject.Redirects
@{
    if (!(User.IsInRole("WebAdmins") || User.IsInRole("CmsAdmins") || User.IsInRole("Administrators") || User.IsInRole("WebEditors") || User.IsInRole("CmsEditors")))
    {
        Response.ClearContent();
        Response.Write("Access denied because user is not an administrator or editor.");
        Response.StatusCode = (int)HttpStatusCode.Forbidden;
        return;
    }
}
@{ OnLoad(); }
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Redirect Manager</title>

    @Html.Raw(ClientResources.RenderResources("ShellCore"))
    @Html.Raw(ClientResources.RenderResources("ShellWidgets"))
    @*<style> a:visited { color: #fff; } </style>*@ @* override epi style *@

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="//stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
    <!-- Optional theme -->
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">

    @*<link rel="stylesheet" href="@EPiServer.Shell.Paths.ToShellClientResource("ClientResources/epi/themes/sleek/sleek2.css")">*@
    <script src="//code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="//stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js" integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="//use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous">
</head>
<body>

    @Html.Raw(MenuHelper.CreateGlobalMenu("/global", "/global/cms/redirects"))


    <div class="container-fluid">

        @if (!RedirectRuleStorage.IsUpToDate)
        {
            <div class="card card-danger my-3">
                <div class="card-header">DB is not up to date!!</div>
                <div class="card-body">
                    <form class="form-inline" method="post" action="@(Request.Url.AbsolutePath)">
                        <button type="submit" name="action" value="updateDb" class="btn btn-danger">Update DB (@(RedirectRuleStorage.RedirectTableName) -table)</button>
                    </form>
                </div>
            </div>
        }

        <div class="card @(Action == "select" ? "card-info" : "card-success") my-3">
            <div class="card-header">
                <b class="card-title"><a href="#" data-toggle="collapse" data-target="#addcard">@(Action == "select" ? "Modify redirect rule" : "Add new redirect rule")</a></b>
            </div>
            <div id="addcard" class="card-collapse card-body collapse @(Action=="select" ? "show" : "")">

                <form method="post" action="@(Request.Url.AbsolutePath)" class="w-100" style="max-width: 1600px;">
                    <input type="hidden" name="id" value="@(CurrentRedirect?.Id)" />

                    <div class="form-row">
                        <div class="col-md-1 form-group form-group-sm">

                            <label class="lb-sm" for="">Order</label>
                            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Order of rules are executed">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <input type="number" class="form-control input-sm" style="width: 80px;" name="sortorder" placeholder="1" value="@(CurrentRedirect?.SortOrder ?? 100)">
                        </div>
                        <div class="col-md-4 form-group form-group-sm bg-light">
                            <label class="lb-sm" for="">Host</label>
                            <a data-toggle="tooltip" class="tooltipLink" data-original-title="If Host field is *, the rule affects on all domains. Current request host is @(Request.Url.Host).">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <select class="form-control input-sm" name="host" style="">
                                @foreach (var hostGroup in HostOptions)
                                {
                                    <optgroup label="@hostGroup.Title">
                                        @foreach (var h in hostGroup.Hosts)
                                        {
                                            <option @(h.Host.Equals(CurrentHost, StringComparison.InvariantCultureIgnoreCase) ? "selected" : "")>@h.Host</option>
                                        }
                                    </optgroup>
                                }
                            </select>

                        </div>
                        <div class="col-md-6 form-group form-group-sm bg-light">
                            <label class="lb-sm" for="">From Url</label>
                            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Relative address which address or addresses are redirected.">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <input type="text" class="form-control input-sm" name="fromurl" placeholder="/redirect/from OR https://www.domain.com/redirect/from" value="@(CurrentRedirect?.FromUrl)">
                        </div>
                        <div class="col-md-1 form-group form-group-sm">
                            <label class="lb-sm" for="">Wildcard</label>
                            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Wildcard allows redirecting all addresses which start with 'From Url' prefix.">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <input type="checkbox" class="form-control input-sm checkbox" style="width: 17px; height: 17px;" name="wildcard" value="true" @(CurrentRedirect?.Wildcard ?? false ? "checked" : null)>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-md-5 form-group form-group-sm bg-light">
                            <label class="lb-sm" for="">To Url</label>
                            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Url can be absolute or relative address.">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <input type="text" class="form-control input-sm" name="tourl" placeholder="/redirect/to OR https://www.domain.com/redirect/to" value="@(CurrentRedirect?.ToUrl)">
                        </div>
                        <div class="col-md-1 form-group form-group-sm bg-light">
                            <label class="lb-sm" for="">Relative to from url</label>
                            <a data-toggle="tooltip" class="tooltipLink" data-original-title="When enabled, the matching part of the original url is replaced and the relative part is preserved.">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <input type="checkbox" class="form-control input-sm checkbox" style="width: 17px; height: 17px;" name="relativeToFromUrl" value="true" @(CurrentRedirect?.RelativeToFromUrl ?? false ? "checked" : null)>
                        </div>
                        <div class="col-md-1"><div class="text-center h3">OR</div></div>
                        <div class="col-md-1 form-group form-group-sm bg-light">
                            <label class="lb-sm" for="">To Content Id</label>
                            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Content Id is the Episerver CMS content ID number. If Content Id field is set then the 'To Url' is dismissed.">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <input type="number" class="form-control input-sm" style="width: 90px;" name="tocontentid" placeholder="1" value="@(CurrentRedirect?.ToContentId ?? 0)">
                        </div>
                        <div class="col-md-1 form-group form-group-sm bg-light">
                            <label class="lb-sm" for="">Language</label>
                            <select class="form-control input-sm" name="tocontentlang">
                                @{
                                    var languageOptions = new[] { "" }.Concat(RedirectService.GetGlobalLanguageOptions());
                                    var selectedLang = CurrentRedirect?.ToContentLang ?? "";
                                }
                                @foreach (string lang in languageOptions)
                                {
                                    <option @(selectedLang == lang ? "selected" : "")>@lang</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            @if (Action == "select")
                            {
                                <button type="submit" class="btn btn-lg btn-success m-0 w-50 text-white" name="action" value="modify">Save</button>
                                <a href="@Request.Url.AbsolutePath" class="btn btn-sm btn-warning m-0">Cancel</a>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-lg btn-success w-100 text-white" name="action" value="add">Save</button>
                            }
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-12 form-group form-group-sm">
                            <label class="lb-sm" for="">Comment</label>
                            <textarea name="comment" class="form-control read-only" style="height: 50px; min-height: 50px;">@(CurrentRedirect?.Comment?.Replace("<br/>", Environment.NewLine))</textarea>
                        </div>
                    </div>
                </form>
            </div>
        </div>
 
        @if(Action != "select")
        {
        <form class="" method="post" action="@(Request.Url.AbsolutePath)">

            <div class="form-group row mt-4">
                <label class="col-md-2 col-form-label text-md-right h5" for="">
                    Filter by Host
                </label>
                <div class="col-md-8">
                    <select class="form-control input-lg bg-secondary text-white" name="host" style="" onchange="this.form.submit();">
                        @foreach (var hostGroup in HostOptions)
                        {
                            <optgroup label="@hostGroup.Title">
                                @foreach (var h in hostGroup.Hosts)
                                {
                                    <option @(h.Host.Equals(CurrentHost, StringComparison.InvariantCultureIgnoreCase) ? "selected" : "")>@h.Host</option>
                                }
                            </optgroup>
                        }
                    </select>
                </div>
            </div>
            <div class="mb-4">
                <table class="table table-condensed table-hover table-sm">
                    <thead>
                        <tr>
                            <th>Action</th>
                            <th></th>
                            <th>Order</th>
                            <th>Host</th>
                            <th>From Url</th>
                            <th>Wildcard</th>
                            <th>To Url</th>
                            <th>Relative to from url</th>
                            <th>To Id</th>
                            <th>Lang</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in RedirectService.GetListByHost(CurrentHost))
                        {
                            var validationList = RedirectService.ValidateRule(result);
                            string destinationUrl = RedirectService.ResolveToUrl(result);
                            <tr class="@(Request.Params["edited"] == result.Id.ToString() ? "bg-light" : "")">
                                <td>
                                    <button type="submit" name="selectId" value="@result.Id" class="btn btn-sm py-0 btn-info"><span class="d-none d-lg-inline">MODIFY</span><span class="d-inline d-lg-none">M</span></button>
                                    <button type="submit" name="deleteId" value="@result.Id" class="btn btn-sm py-0 btn-danger" onclick="return confirm('Are you sure you want to delete this item?');"><span class="d-none d-lg-inline"><small>delete</small></span><span class="d-inline d-lg-none">d</span></button>
                                </td>
                                <td>
                                    @if (validationList.Any())
                                    {
                                        string vMsg = string.Join("<br/>", validationList);
                                        <a data-toggle="tooltip" class="tooltipLink" data-original-title="@Html.Raw(vMsg)">
                                            <i class="fas fa-exclamation-triangle text-danger h6"></i>
                                        </a>
                                    }
                                    @if (!string.IsNullOrEmpty(result.Comment))
                                    {
                                        <a data-toggle="tooltip" class="tooltipLink" data-original-title="@(result.Comment?.Replace("<br/>",", "))">
                                            <i class="far fa-comment h6"></i>
                                        </a>
                                    }
                                </td>
                                <td>@(result.SortOrder)</td>
                                <td>@(result.Host)</td>
                                <td style="width: 30%;"><span class="font-weight-bold d-inline-block text-truncate" style="max-width: calc(30 * 1vw);">@(result.FromUrl)</span></td>
                                <td><input type="checkbox" class="checkbox" @(result.Wildcard ? "checked" : null) disabled /></td>
                                <td style="width: 30%;"><span class="d-inline-block text-truncate @(result.ToContentId>0?"text-muted":"")" style="max-width: calc(30 * 1vw);">@(destinationUrl)@Html.Raw(result.RelativeToFromUrl ? "<span class=text-muted>***</span>" : "")</span></td>
                                <td><input type="checkbox" class="checkbox" @(result.RelativeToFromUrl ? "checked" : null) disabled /></td>
                                <td><b>@(result.ToContentId > 0 ? result.ToContentId.ToString() : "")</b></td>
                                <td>@(result.ToContentLang)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </form>
        }

        <div class="card card-default my-3">
            <div class="card-header">
                <b class="card-title"><a href="#" data-toggle="collapse" data-target="#exportcard">Export / import</a></b>
            </div>
            <div id="exportcard" class="card-collapse card-body collapse @(Request.Params["open-import-export"] != null ? "show": "")">

                <form class="form" method="post" action="@(Request.Url.AbsolutePath)" enctype="multipart/form-data">
                    <input type="hidden" name="open-import-export" value="true" />
                    <div class="">
                        <h4>Export CSV/Excel</h4>
                        <div class="mb-3">
                            <p>Filter exported rules by host (* will export all):</p>
                            <select class="form-control input-sm bg-light my-2" name="host" style="" onchange="this.form.submit();">
                                @foreach (var hostGroup in HostOptions)
                                {
                                    <optgroup label="@hostGroup.Title">
                                        @foreach (var h in hostGroup.Hosts)
                                        {
                                            <option @(h.Host.Equals(CurrentHost, StringComparison.InvariantCultureIgnoreCase) ? "selected" : "")>@h.Host</option>
                                        }
                                    </optgroup>
                                }
                            </select>
                            <button type="submit" name="action" value="exportDownloaHeaders" class="btn btn-info text-white">Download CSV Export for Excel</button>
                            <button type="submit" name="action" value="exportDownload" class="btn btn-secondary text-white">Download CSV Export without Headers</button>
                            <button type="submit" name="action" value="exportPrint" class="btn btn-secondary text-white">Print CSV Export</button>
                        </div>
                    </div>
                    <div class="">
                        <h4>Import CSV</h4>
                        <p>Import will not remove any rules. It will update the existing rule if id and host values are equal or new rule will be generated. Rules without Id field are automatically new rules. Duplicated (as similar data) will be ignored.</p>
                        <div class="mb-3">
                            <input type="file" name="importFile" class="form-control" />
                            <button type="submit" name="action" value="import" class="btn btn-info text-white my-2">Import CSV file</button>
                        </div>
                        @if (Action == "import")
                        {
                            <div class="card bg-success text-white m-3"><div class="card-header">@ResultMessage</div></div>
                        }

                    </div>
                </form>
            </div>
        </div>


        <div class="card card-default my-3">
            <div class="card-header">
                <b class="card-title"><a href="#" data-toggle="collapse" data-target="#versionscard">Versions / Latest Changes</a></b>
            </div>
            <div id="versionscard" class="card-collapse card-body collapse">
                <form class="form" method="post" action="@(Request.Url.AbsolutePath)">
                <ul>
                    @foreach (var r in RedirectService.GetLatestChanges(maxItems: 30))
                    {
                        string action = r.Deleted ? "delete" : r.VersionCount > 1 ? "update" : "create";
                        <li class="m-1 p-2 bg-light">
                            <div class="h6 text-primary p-1">
                                @(r.Modified?.ToString("s", CultureInfo.InvariantCulture)),
                                <i>@r.ModifiedBy</i>,
                                <b>@(action)</b>
                                <a class="btn btn-secondary py-0 ml-2 text-white" data-toggle="collapse" data-target="#restore_@(r.Id)">restore previous version</a>
                                <button type="submit" name="selectId" value="@r.Id" class="btn btn-sm py-0 btn-info">Modify current</button>
                            </div>
                            <div id="restore_@(r.Id)" class="collapse">
                                @if (action != "create")
                                {
                                    <p>Use import feature to restore previous rule:</p>
                                    <pre>@(r.VersionLines.ElementAtOrDefault(Math.Max(0, r.VersionCount-1-1)))</pre>
                                }
                                else
                                {
                                    <button type="submit" name="deleteId" value="@r.Id" class="btn btn-sm py-0 btn-danger" onclick="return confirm('Are you sure you want to delete this item?');">delete created item</button>
                                }
                            </div>
                        </li>
                    }
                </ul>
                </form>
            </div>
        </div>

        <div class="card card-default my-3">
            <div class="card-header">
                <b class="card-title"><a href="#" data-toggle="collapse" data-target="#instructionscard">Instructions</a></b>
            </div>
            <div id="instructionscard" class="card-collapse card-body collapse">
                <p>Redirect Manager allows to add, modify and remove <b>permanent redirection rules</b> (alias HTTP 301, Moved Permanently).</p>
                <p>Rules are redirected in 404 handler, so all the pages and static content overrides these rules.</p>
                <p>Url addresses are <b>NOT case sensitive</b>. Also the <b>trailing slash (/) in urls' is removed</b> before rule's are applied.</p>
                <p>Wildcard rules redirect all the addresses that starts with the from url address.</p>
                <p>Relative to from url -rules replace the matching part of the original url and the relative part is preserved.</p>
                <p>Be careful, it's possible to create eternal loop and damage the service.</p>
            </div>
        </div>

        <footer class="mb-5">&nbsp;</footer>
    </div>
    
    <style>
        .lb-sm {
            font-size: 12px;
        }
        .container {
            margin-top: 20px;
        }
        .table-sm {
            font-size: 12px;
        }
    </style>
    <script type="text/javascript">
        $("a.tooltipLink").tooltip();
    </script>
</body>
</html>

@functions{

    public RedirectService RedirectService = ServiceLocator.Current.GetInstance<RedirectService>();
    public RedirectRule CurrentRedirect = null;
    public string CurrentHost = null;
    public string Action = "";
    public string ResultMessage = "";
    private List<(string Title, List<(string Host, bool? UseSecureConnection)> Hosts)> _hostOptions;
    public List<(string Title, List<(string Host, bool? UseSecureConnection)> Hosts)> HostOptions => _hostOptions ?? (_hostOptions = RedirectService.GetHostOptions());

    protected void OnLoad()
    {
        (Action, CurrentRedirect, CurrentHost) = GetActionAndCurrent();
        

        if (Request.Url == null || !Request.HttpMethod.Equals("post", StringComparison.InvariantCultureIgnoreCase))
            return;

        if (Action == "add")
        {
            int id = RedirectService.AddRedirect(ParseIntOrDefault(Request.Params["sortorder"]),
                                                Request.Params["host"],
                                                Request.Params["fromurl"],
                                                ParseBoolOrDefault(Request.Params["wildcard"]),
                                                Request.Params["tourl"],
                                                ParseBoolOrDefault(Request.Params["relativetofromurl"]),
                                                ParseIntOrDefault(Request.Params["tocontentid"]),
                                                Request.Params["tocontentlang"],
                                                Request.Params["comment"],
                                                Context
                                                );
            if (id > 0)
            {
                Response.Redirect(Request.Url.AbsolutePath + $"?host={Request.Params["host"]}&edited={id}");
            }
        }
        if (Action == "modify")
        {
            int id = RedirectService.ModifyRedirect(CurrentRedirect.Id,
                                                    ParseIntOrDefault(Request.Params["sortorder"]),
                                                    Request.Params["host"],
                                                    Request.Params["fromurl"],
                                                    ParseBoolOrDefault(Request.Params["wildcard"]),
                                                    Request.Params["tourl"],
                                                    ParseBoolOrDefault(Request.Params["relativetofromurl"]),
                                                    ParseIntOrDefault(Request.Params["tocontentid"]),
                                                    Request.Params["tocontentlang"],
                                                    Request.Params["comment"],
                                                    Context
                                                    );
            if (id > 0)
            {
                Response.Redirect(Request.Url.AbsolutePath + $"?host={Request.Params["host"]}&edited={id}");
            }
        }
        if (Action == "delete")
        {
            int n = RedirectService.DeleteRedirect(CurrentRedirect.Id);
            if (n > 0)
            {
                Response.Redirect(Request.Url.AbsolutePath + "?host=" + Request.Params["host"]);
            }
        }

        if (Action == "updateDb")
        {
            RedirectRuleStorage.UpdateTableToLatest();
            Response.Redirect(Request.Url.AbsolutePath);
        }

        if (Action == "exportDownload" || Action == "exportPrint" || Action == "exportDownloaHeaders")
        {
            var export = RedirectService.ExportCsv(CurrentHost, addHeaders: Action == "exportDownloaHeaders");
            Response.ClearContent();
            Response.Write(export);
            if (Action == "exportPrint")
            {
                Response.ContentType = "text/plain";
            }
            else
            {
                Response.AddHeader("Content-Disposition", "attachment;filename=redirects.csv");
                Response.ContentType = "text/csv";
            }
            Response.End();
            return;
        }

        if (Action == "import")
        {
            var result = RedirectService.ImportCsv(Context, "importFile");
            ResultMessage = $"Imported {result} rules!";
        }
    }

    private (string Action, RedirectRule Current, string currentHost) GetActionAndCurrent()
    {
        string action = Request.Params["action"];
        string currentIdParam = Request.Params["id"];
        RedirectRule current = null;

        if (!string.IsNullOrEmpty(Request.Params["selectId"]))
        {
            currentIdParam = Request.Params["selectId"];
            action = "select";
        }
        if (!string.IsNullOrEmpty(Request.Params["deleteId"]))
        {
            currentIdParam = Request.Params["deleteId"];
            action = "delete";
        }
        var id = ParseIntOrDefault(currentIdParam);
        if (id.HasValue)
        {
            current = RedirectService.GetRedirect(id.Value);
        }
        string currentHost  = current?.Host ?? Request.Params["host"] ?? Request.Url?.Host;
        return (action, current, currentHost);
    }


    protected int? ParseIntOrDefault(string value)
    {
        if (int.TryParse(value, out int result))
            return result;
        return null;
    }

    protected bool? ParseBoolOrDefault(string value)
    {
        if (bool.TryParse(value, out bool result))
            return result;
        return null;
    }
}